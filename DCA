--------------Deleting all images---------------
docker system prune -: for all images,container, volumes and network that are dangling'
docker system prune -a -: delete all stopped container and unused images
------------------------------------------------------------------------------
------------------Network commands----------------------------------------
ifconfig
netstat -ntlp
curl -I 'address'
-------------------------------------------------------------------------------

docker pull 'image name':'tag i.e version'  -: to pull from register
docker run -dt -p 8080 'image name'
docker ps -: to see all running containers
docker stop 'container name' -: to stop a container
docker ps -a -: see all container in relatin to ther status
docker ps -all -: samme command as -a
docker start 'container name' -: to start a container you stopped before
docker inspect 'container name' -: to inspect a container
docker container ls -aq -: gives all the id of the container
dock container stop $(docker container ls -aq) -: stop all the container given the id
docker container rm 'container id/nam -: removing. should be stopped first
-----------------------------Docker exec----------------------------------------------------------------
docker container exec -: to enter the running container and appy changes and thing like that.
 
for ex if u have nginex it have bash shellprogramm so you can enter that.
ex -: docker container run -d -p 81:80 --name docker-exec 'image name'
docker container exec -it docker-exec bash
you can do now like apt-get update, apt-get install netstat-tools then you can check by using
netstat -ntlp. you can even directly use it from the terminal since you have updated the container
docker container exec -it docker-exec netstal -ntlp
the primary process should be running for the exec to work. PID/Program name should be 1/nginx: master pro
if you enterd the bash using docker container exec -ti docker-exec bash and stopped the PID with
going in to etc/init.d/nginx stop, then the process is stopped and the container is stopped also
--------------------------------------------------------------------------------------------------

process created in linux environment have three open file discriptors stdin, stdout, stderr
-i keep the stdin open thus yr tty is not present
-t gives you a tty but no way of stdin
so -it gives you an interactive stdin
they are two seperate flag so it can be expressed as -i -t but can be compined to -it
-i is shorten for --interactive
-t is for --tty
                   
Default container command
 a default command execute which typically runs as PID 1
this is found on the docker file in the CMD part then this will start automatically
this is also displayed on the command on when running docker container ps.
docker container run -dt nginx sleep 500 -: heare we have change the default comman for the 
image

Docker Restart policy
when the docker daemon is restarted, the containers won't restart automatically
systemctl restart docker
flags are no(dont restart it is the default), on-failure(resart if stoped by error)
unless-stopped(restart the container unless it is stopped specifially or docker is stopped or restarted)
always(always restart the container if it stops)

docker container run -d  --restart unless-stopped nginx
docker container rm 'container name'
docker container rm -f 'container name' since running containers can't be removed one can force them to be deleted. it is not advisabel

disk usage on docker
df -h -: linux command for disk usage
docker system df -: disk usage by containers, images, local volumes
docker system df -v -: per component disk usage
docker log 'container name'
docker container run --help
docker container run --help | grep rm
docker container run -dt --rm ....

docker healt check
if the --healthcheck is used and the option aren't specifed then default
is used
--interval will be 30s, --timeout become 30 s
--start-period will be 0s, --retries will be 3 times
0 success, 1 failure 2 reserved
docker run -dt --name temp --health-cmd "curl -f http://localahost" busybox sh
docker run -dt --name temp --healt-cmd "curl -f http://localhost" /
--health-interval=5s --health-retries=1 busybox sh

-f flag on curl is used for option to fail silenttly

docker entrypoint
it sets the main command.
cmd can be used but cmd can be overiden but entrypoint cant
entry cant be over ritten but can be appended on

-------Docker Container Orchestration-------------
Solution for orchestration that are avalible are Docker swarm, Kubernetes, Apaches mesos,
AES ECS(elsastic container service)

docker service ls
systemctl stop docker
systemctl status docker

in order to start up three vm's and run docker on them we have to take some steps
first a script is needed
#!/bin/bash
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum -y install docker-ce
systemctl start docker
systemctl enable docker
2. make the script executable by chmod +x docker-install.sh
3. run the script -: ./docker-install.sh
You can repeat the process for the numbe of vm's you want to spinn off

a node is an instantce of the docker engine participating in the swarm.
one of the node should be a manager node and apply service defination
the manager nodes dispatches units of work called tasks to worker nodes

initalizing docker swarm
one is on the manage node and one is on the worker node
on the manage node -: docker swarm init --advertise-addr <manager ip>
worker node -: docker swarm join <join token> worker
ifConfig -: in order to get the ip to make it the manage node
ifconfig eth0
docker swarm init --advertise-addr 172.18.19.160 (on the terminal of the manager node)
docer swarm join <jointoken> -: this join token you get when intalizing the manager node

a servise is the definaion of the tasks to execute on the manager or worker nodes.
docker service create --name webserver --replicas 1 nginx -: it is a service that runs nginx
docker service ls
docker service ps 'webserver'
dpcler service rm webserver
docker service scale webserver=5
docer service update --replicas 3 service1
docker service scale webserver=5 vs docker service update --replicas 5 mywebserver
in scale we can scale multiple service at one that is docker service scale service1=2 service2=5

There are two types of services deployments and they are replicated and global.
fo a replicated serverce you specify the number of identical task you want to run
a global service is that one task on every node. for example installation of Antivirus on one node
will lead to the instalation of antivirus on the other nodes that are in the swarm

docker service create --name antivirus --mode global -dt ubuntu

draining a node when wanting to update or do something. the best way is to migrate it rather than stopping it.
docker node update --availability drain swarm03(node) this will make the node inactive so no task will be asigned
to it
docker node update --availability active swarm03
docker service inspect 'service name'
docker service inspect 'service name' --pretty
docker node inspect 'node name'
docker node inspect 'node' --pretty
